static 静态存储 字符串字面量如果在函数中使用
只会被存储一次，在整个程序的生命周期内存在
用双引号括起来的内容被视为指向字符串存储位置的指针
用%p打印"xxx"，将打印第一个字符的地址
*"so many" 用%c打印将打印 s

字符串数组
char ma[40] = {'L', 'i', 'm', …… , '\0'}
没有最后的空字符就是字符数组
char ma[40] = "Limit yourself ……"
保证元素个数至少比字符串长度多1
未被使用的元素被初始化为空字符\0
初始化字符串时省略数组的大小很好，如果不初始化数组，必须指定大小

可以用指针表示创建字符串
const char * pt1 = "Something is"
const char ar1[] = "Something is"
两种形式不完全相同
数组形式将字符串储存在static memory，程序运行时为数组分配内存，此时将字符串拷贝到数组中
ar1是地址常量，可以用ar1+1标识下一个元素，但不能ar1++
指针形式也将字符串储存在static memory，程序运行时为指针变量pt1留出一个储存位置，并将字符串地址储存在其中，pt1的值可变，可以pt1++
字符串字面量视为const数据，pt1指向这个const数据，故pt1应声明为指向const数据的指针，pt1不能改变所指向的数据
如果把一个字符串字面量拷贝到数组，就可以改变数据，除非数组声明为const

如果让字符串的指针指向别处，将无法再访问该字符串，除非保存了字符串的地址

char * word = "frame";
word[1] = 'l' ;	这样是未定义的，编译器可能使用内存中的一个副本表示所有相同的字符串字面量，如果在别处引用了该字符串，将导致所有实例被替换

指针数组和字符串数组
单下标时均表示一个字符串，双下标时均表示一个字符，初始化方式相同
指针数组初始化时使用的字符串字面量储存在静态内存，字符串不在连续的内存中
但指针数组的字符串字面量不能更改
字符串数组储存着字符串字面量的副本，且要求每个元素的大小相同，效率低

gets()读取输入直到遇到换行符，丢弃换行符并自动在输入后加\0使之成为字符串

fgets()读到换行符时停止，但会储存换行符
如果从键盘读入，第三个参数为stdin
fgets()最多读取比第二个参数少1的字符

fgets()返回指向char的指针，一般应与第一个参数的地址相同
但如果读到文件的结尾，将返回空指针NULL或0，此处的0是指针类型
而空字符'\0'是整数类型

gets_s()只从标准输入读取数据，不需要第三个参数
gets_s()读到换行符，丢弃
若gets_s()读到最大字符数时仍未遇到换行符，首先把目标数组的首字符设为空字符
读取并丢弃随后的输入直至读到换行符或文件结尾，接着调用处理函数

当输入行未超过最大字符数，gets_s()与gets()几乎一样
如果目标存储区装得下输入行，3个函数都可以，但fgets()储存换行符
如果输入行太长，gets()不安全，gets_s()安全，但需要处理函数，且会丢弃该输入行的其余字符

s_gets()不是标准函数，读取整行输入，用空字符代替换行符，或者读取一部分输入并丢弃其余部分，返回值与fgets()相同

scanf()使用%s，以第1个非空白字符作为开始，第1个空白字符作为结束
如果指定字符宽度，将读取相应个字符或读到第1个空白字符停止
scanf()读到文件结尾时返回EOF，返回读取的字符串数

puts()输出字符串，并加上换行符，只需把字符串的地址传递给它
puts("");可以用于换行
在遇到空字符时停止输出

fputs()的第2个参数指明要写入数据的文件，不会在末尾自动添加换行符
如果显示在显示器上，fputs()第二个参数为stdout

printf()也把字符串的地址作为参数，但不会在字符串末尾添加换行符

当string指向空字符时，*string的值是0

strlen()统计字符串的长度，不包括'\0'

strcat用于拼接字符串，将第二个参数的备份附加在第一个字符串末尾
覆盖第一个字符串的空字符，返回拼接后的第一个字符串的地址
将拼接后的字符串作为第一个字符串，第二个字符串不变
无法检查第一个数组能否容纳第二个字符串

strncat()的第3个参数指定了最大添加字符数，在添加到相应个数的字符或遇到空字符时停止

strcmp()比较两个字符串的内容，相同返回0，不同返回非0值
只会比较第一个空字符前的部分，可用于比较储存在不同大小数组中的字符串
依次比较字符，直到遇到第一个不同的字符，若此时第一个字符串的该字符的数值
比第二个字符串对应的字符小，返回负数，否则返回正数

strncmp()可以只比较到第三个参数指定的字符数
可用于查找以某几个字符开头的字符串

strcpy()可以把字符串拷贝到一个数组，相当于字符串赋值运算符
第二个参数指向的字符串被拷贝至第一个参数指向的数组
strcpy()返回第一个参数的值
第一个参数不必指向数组的开始，即可用于拷贝数组的一部分
strcpy()把源字符串中的空字符也拷贝在内

strncpy()第3个参数指明可拷贝的最大字符数
如果拷贝到最大字符数还未拷贝完整个源字符串，就不会拷贝空字符

sprintf()在stdio.h中，它把多个元素合成一个字符串，把数据写入到字符串
第一个参数是目标字符串的地址，其余与printf()相同
即格式字符串和待写入项的列表

strchr()的第一个参数是字符串，第二个参数是字符，如果字符串中包含该字符
函数返回指向字符串首位置的指针，查找范围包括空字符
如果未找到该字符，返回空指针

strpbrk()如果第一个字符串包含第二个字符串中的任意字符
返回指向第一个字符串首位置的指针，否则返回空指针

strrchr()的第一个参数是字符串，第二个参数是字符，函数返回字符串中该字符
最后一次出现的位置，查找范围包括空字符
如果未找到该字符，返回空指针

strstr()返回指向第一个字符串中第二个字符串出现的首位置，如果第一个字符串
中没有找到第二个字符串，返回空指针

strlen()返回字符串中的字符数，不包括空字符

int main(int argc, char* argv [])
第一个参数是命令行的字符串数量，称为argc（参数计数）
用空格表示一个字符串的结束和下一个字符串的开始
命令行字符串储存在内存中，每个字符串的地址储存在指针数组
数组地址储存在第二个参数中，指向指针的指针称为argv
有的系统允许用双引号把多个单词括起来形成一个字符串参数

atoi()把字母数字转换成整数，接受一个字符串作为参数，返回相应的整数值
如果字符串仅以整数开头，atio()将返回开头的整数
如果字符串开头不为整数，未定义
atoi()在stdlib.h中

atof()把字符串转换成double类型，atol()转换成long类型

strtol()把字符串转换成long类型，strtoul()转换成unsigned long类型
strtod()转换成double类型，这三个函数能够识别字符串的首字符是否是数字
原型为long strtol(const char* restrict nptr, char** restrict endptr, int base);
nptr是指向待转换字符串的指针，endptr是标识输入数字结束字符的地址
base表示以什么进制写入数字，最多可转换三十六进制