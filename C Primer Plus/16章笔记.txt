预处理之前，编译器首先把源代码中的字符映射到源字符集
然后定位每个反斜杠后跟着换行符的实例并删除它们
即把下面两个物理行转换成一个逻辑行
printf("That's wond\
	erful\n");
printf("That's wonderful\n");
第三，编译器把文本划分成预处理记号序列，空白序列和注释序列
记号是由空格，制表符或换行符分隔的项
编译器将用一个空格字符替换每一条注释，因此
int/*这看起来并不像一个空格*/fox;
将变成
int fox;
因此可以在#define行使用标准C注释
而且，实现可以用一个空格替换所有的空白字符序列（不包括换行符）
最后，预处理器查找一行中以#开头的预处理指令

C标准允许#前面有空格或制表符，还允许在#和指令的其余部分之间由空格
指令可以出现在源文件的任何地方，其定义从指令出现的地方到该文件末尾有效

预处理器指令从#开始运行，到后面的第1个换行符为止，即指令的长度限于一行
然而，编译器会在预处理开始前将多行物理行处理为一行逻辑行

选定的缩写称为宏，宏的名称遵循C变量的命名规则

宏名中不允许有空格，但是替换字符串中可以有空格，参数列表中可以使用空格

预处理器不求值，只进行替换
不会替换双引号中的宏

宏定义还可以包含其他宏

宏的替换体是记号型字符串而非字符型字符串

ANSI将重定义常量视为错误，除非新定义和旧定义完全相同
这意味着替换体中的记号必须相同，且顺序也相同
如果需要重定义宏，使用#undef指令

代表值的宏称为类对象宏，在#define中使用参数可以创建类函数宏

类函数宏调用，必要时，需要多加几个圆括号
#define SQUARE(X) X*X
SQUARE(x+2)	x+2*x+2
#define SQUARE(X) (X)*(X)
100/SQUARE(2)	100/2*2
#define SQUARE(X) ((X)*(X))
SQUARE(++x)	++x*++x
避免用递变运算符作为宏参数

#预处理运算符
在类函数宏的替换体中，将记号转换成字符串
如果x是一个宏形参，那么#x就是转换为字符串"x"的形参名
这个过程称为字符串化
#define PSQR(x) printf("The square of " #x " is %d\n", ((x)*(x)))
int y = 5;
PSQR(y+2);
结果为
The square of y+2 is 49
调用宏时，用"y+2"替换#x
printf("The square of " "y+2" " is %d\n",((x)*(x)));
字符串的串联特性将这个字符串与printf()的其他字符串组合，生成最终的字符串

##运算符，预处理器黏合剂
用于类函数宏和对象宏的替换部分，把两个记号组合成一个记号
#define XNAME(n) x ## n
然后，宏XNAME(4)将展开为x4，如
int XNAME(1) = 10;
变成
int x1 = 10；
#define PRINT_XN(n) printf("x" #n " = %d\n", x ## n);
PRINT_XN(2);
变成
printf("x2 = %d\n", x2);
##运算符把记号组合为一个新的标识符

stdvar.h提供了让用户自定义带可变参数的函数的工具
C也对宏提供了这样的工具，通过把宏参数列表中最后的参数写成省略号来实现
即(...)
预定义宏__VA_ARGS__用于替换部分，表明省略号代表什么
#define PR(...) printf(__VA_ARGS__)
调用该宏时
PR("Howdy");
__VA_ARGS__展开为1个参数"Howdy"
PR("weight = %d, shipping = $%.2f\n", wt, sp);
__VA_ARGS__展开为3个参数"weight = %d, shipping = $%.2f\n", wt和sp
即
printf("weight = %d, shipping = $%.2f\n", wt, sp);

#define PR(x, ...) printf("Message " #x ": " __VA_ARGS__)
PR(1, "x = %g\n", x);
变为
printf("Message " "1" ": " "x = %g\n", x);
即
printf("Message 1: x = %g\n", x);

省略号只能代替最后的宏参数，不能将省略号置于参数中间
#define WRONG(X, ..., Y) #X #__VA_ARGS__ #Y	//不能这样做


编译器发现#include指令时，查看后面的文件名并将文件的内容替换源文件的#include指令
尖括号告诉预处理器在标准系统目录中查找该文件，双引号告诉预处理器首先在当前目录或文件名指定的其他目录查找文件，如果未找到再查找标准系统目录

头文件的内容是编译器生成最终代码时所需的信息，而非添加到最终代码中的材料

在一个文件中同时使用定义式声明和引用式声明没问题

使用具有内部链接的文件作用域和const限定的变量或数组，可以包含头文件
static意味着每个包含该头文件的文件都获得一份副本
因此不需要在一个文件中进行定义式声明，在其他文件中进行引用式声明

#undef指令用于取消已定义的#define指令
#define LIMIT 400
#undef LIMIT
将移除上面的定义
即使原来没有定义LIMIT，取消LIMIT的定义仍然有效

#ifdef
	#include "horse.h"
#else
	#define STABLES 15
#endif
预处理器不识别用于标记块的花括号，因此#endif必须存在
指令结构可以嵌套，也可以用这些指令标记C语句块
int main(void)
{
        int i;
        int total = 0;
        for(i=1; i<=LIMIT; i++)
        {
	total += 2*i*i+1;
#ifdef JUST_CHECKING
	printf("i = %d, running total = %d\n", i, total);
#endif
        }
        return 0;
}
可以用这种方法调试程序

#ifndef指令的用法与#ifdef类似
可以防止重定义宏，或多次包含一个文件

#if后面跟整型常量表达式，非零为真，可以使用关系运算符和逻辑运算符
#elif类似else if
#if后也必须有#endif

另一种方法测试名称是否已定义，用#if defined (VAX)代替#ifdef VAX
这里defined是一个预处理运算符，如果它的参数用#define定义过，返回1，否则返回0
这种方法的优点是可以和#elif一起使用

__func__是预定义标识符而非预定义宏，宏具有文件作用域，而__func__展开为一个代表函数名的字符串，因此具有函数作用域

预定义宏一定是已定义的，且不能取消定义

#line指令重置__LINE__和__FILE__宏报告的行号和文件名
#line 1000	//将当前行号重置为1000
#line 10 "cool.c"	//将行号重置为10，把文件名重置为cool.c

#error指令让预处理器发出一条错误消息，包含指令中的文本
如果可能的话，编译过程应该中断
#if __STDC_VERSION__ != 201112L
#error NOT C11
#endif
如果编译器只支持旧标准，就会编译失败

#pragma把编译器指令放入源代码
在开发C99时，标准被称为C9X，使用下面的编译指示让编译器支持C9X
#pragma c9x on

_Pragma预处理器运算符，把字符串转换成普通的编译指示
_Pragma("nonstandardtreatmenttypeB on")
等价于
#pragma nonstandardtreatmenttypeB on
由于该运算符不使用#符号，可以把它作为宏展开的一部分
#define PRAGMA(X) _Pragma(#X)
#define LIMRG(X) PRAGMA(STDC CX_LIMITED_RANGE X)
然后使用
LIMRG(ON)
即
#pragma STDC CX_LIMITED_RANGE ON
_Pragma运算符完成解字符串的工作，即把字符串中的转义序列转换成字符
_Pragma("use_bool \"true \"false")
变成了
#pragma use_bool "true "false

泛型选择表达式可根据表达式的类型选择一个值
泛型选择表达式不是预处理器指令，但常用作#define宏定义的一部分