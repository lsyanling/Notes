什么是计算机系统结构：程序员所看到的计算机的属性，程序员编写程序必须了解到的概念性结构和功能特性。

宽泛定义：使用各种可行的制造工艺进行抽象层的设计，使得应用程序有效运行。

主机计算 网络计算 普适计算

个人计算机 小型 中型 小巨型 巨型 工作站

新摩尔定律 每两年核数+2，每四年数据宽度x2

频率墙 功耗墙 存储墙 应用墙

电子漂移现象，晶体管失去可靠性

潜在加速比==流水线级数

管态==内核态 目态==用户态

计算机组成是计算机体系结构的逻辑实现
计算机实现是计算机组成的物理实现

什么是指令集架构：a set of instructions，且每条指令都是由cpu硬件来执行的
用二进制的形式存储指令集，有定长指令和不定长指令

流水段的执行时间不均衡降低加速比
通过时间和排空时间降低加速比

流水线中每个子过程及其功能部件称为流水线的段，段与段相互连接形成流水线
流水线的段数称为深度
最慢的流水段称为瓶颈

RISC三类指令：ALU，LoadStore，分支和跳转

结构冲突的原因：
某些部件没有充分流水
某些资源没有充分重复设置

分支延迟槽里不能放分支语句

吞吐率TP：单位时间内完成的任务数
最大吞吐率TPMax：流水线稳定时的吞吐率，为瓶颈段的时间的倒数

细分瓶颈段、重复设置瓶颈段

T流水 = kt+(n-1)t = ∑t+(n-1)tmax

TP = n/T流水

加速比S = T非流水/T流水 = CPI非流水/CPI流水
加速比趋于段数，即潜在加速比等于段数

效率E = n∑t/kT流水

提高流水线效率所采取的措施对于提高吞吐率也有好处

流水寄存器的建立时间和传输延迟，时钟偏移开销

基本块：除了入口和出口外没有其它分支的线性指令序列

相关：两条指令之间存在某种依赖关系
冲突：在流水线中，由于相关的存在，指令流中下一条指令不能在指定的时钟周期开始执行

相关性是程序的固有属性，冲突是流水线的特性
相关性的存在只预示着存在冲突的可能性

写后写输出相关

指令控制相关于某分支，不能移动到该分支之前执行
指令不控制相关于某分支，不能移动到该分支内执行

程序正确：不改变产生异常的方式，不产生新的异常，不改变数据流

使用其他分支的行为进行预测的分支预测器称为相关预测器或两级预测器

动态调度可以在cache miss时去执行别的指令

将ID段拆为发射和读数据，前者检测结构冲突，后者检测数据冲突

前瞻执行消除存储器歧义：store后的load不能执行，除非确信不产生RAW冲突

精确中断：不该执行的语句引起了中断
将未提交的中断控制起来，直到该语句提交

静态超标量：一个浮点指令必须和一个其它指令同时发射
一条load的结果不能在两个周期内的3条指令中使用
缺陷：1时钟周期内寄存器更名困难，同时写总线

超长指令字：编译器选取

软件流水：解决循环的不同迭代之间相关
从循环的不同迭代中抽取指令（除控制指令外）拼成新的循环迭代

踪迹调度：跨越分支

指令窗口：在大小为N的窗口中寻找可以被同时发射的指令，时间复杂度是N²

对称多处理
多内核处理器
芯片级多处理
同时多线程

细粒度切换：每条指令之间都切换线程
隐藏所有阻塞带来的吞吐率损失，但减慢了每个线程的执行

粗粒度切换：只发生在代价较高的阻塞出现时，如cache miss
不能有效减少吞吐率的损失，切换流水线必须排空和暂停，要求排空时间要小于stall的时间才有意义

同时多线程是同时开发线程级并行和指令级并行的技术
独立提交到不同的线程
需要大量虚拟寄存器组，各线程寄存器重命名，为每个线程保留PC值等

片上多线程CMT强调芯片整体的事务处理能力
同时多线程强调单CPU的运算能力

同时多线程SMT必须在细粒度切换下，指定优先线程
必须保持时钟周期低，保证同时执行多线程的cache冲突不会导致性能下降

Power5双取指双译码双提交

每位价格C = (C1S1+C2S2)/(S1+S2)
平均访问时间Ta = hitRate*Ta1+(1-hitRate)*(Ta1+Tm)
失效开销Tm = Ta2+Tb，从向M2发出访问请求到把整个数据块调入M1中的时间
传送一个块的时间为Tb

写回法cache miss时引起写，因为要调入块，有块被换出

写分配(写时取)：写miss时先调入cache再写入，写回法总是这样
绕写法：写miss时直接写内存，写直达往往用绕写法

write buffer：解决写stall
为什么不是寄存器？写可能是大量的
RAW冲突：当发生时要完成写buffer的排空，因为CPU不知道没被写入内存

CPU时间 = 时钟周期*(CPU执行周期数+存储器stall周期数)

cache优化方法
降低miss rate
更大的块 强制miss(冷启动miss)
更大的cache 容量miss
更高的相联度 冲突miss

降低miss惩罚
多级cache

降低hit时间

虚存的优点：
通过访问权限管理来保护数据
虚拟地址连续，方便编程
用户共享物理地址（但是有不同的虚拟地址）使得多线程成为可能

victim cache
专门用来存被调出的块

平均故障间隔时间MTBF

RAID0 条带化
RAID1 镜像 读性能好，最贵的解决方案
RAID2 海明码
RAID3 位交叉奇偶校验盘
RAID4 块交叉奇偶校验盘
RAID5 块交叉分布式奇偶校验，奇偶校验信息均匀分布在所有磁盘上
RAID6 块交叉双维奇偶校验盘，两个冗余盘，可以恢复两个盘同时损坏

多倍性：在瓶颈部件上处于同一执行阶段的指令或数据的最大个数

向量chaining
向量指令之间只要算出一个就继续算，不需要等一组全部算出来
multiple lanes
多向量部件同时算一个向量指令

CUDA 单程序多数据流

多处理机基于共享存储器，只有唯一的地址空间
多计算机基于消息传递

UMA 一致性存储访问，只有一块内存
共享存储系统

NUMA 非一致性存储访问

MPP 大规模并行处理机

cluster 工作站集群

多处理器 搭建难 编程易
多计算机 搭建易 编程难

集中式内存大小有限制
分布式对带宽有要求

SMP对称多处理 一个内存 大cache

MPP一般使用标准商用CPU和私有高性能互联网络，但神威使用的是自己的CPU

cluster的结点是计算机，可以是异构的，有一定自主性
MPP系统结点一般没有磁盘，只驻留OS内核
cluster松散耦合，MPP是紧耦合

共享内存才有cache一致性问题

一致性coherence：返回给读操作的是什么值
连贯性consistency：什么时候将已写的值返回给读操作

cache一致性要满足的条件
保持程序顺序，一致性存储器视图，写操作串行化

所有处理器都看到了写的结果，写才算完成

允许处理器无序读

基于目录的
监听：写作废，写更新
直写法：写入内存
写回法：当需要读的时候取消读，提供写数据